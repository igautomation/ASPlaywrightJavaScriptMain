<div class="row mb-4">
  <div class="col-md-4">
    <div class="card">
      <div class="card-header">
        <h5 class="card-title">Data Files</h5>
      </div>
      <div class="card-body">
        <ul class="nav nav-tabs" id="dataFileTabs" role="tablist">
          <li class="nav-item" role="presentation">
            <button class="nav-link active" id="json-tab" data-bs-toggle="tab" data-bs-target="#json-files" type="button" role="tab">JSON</button>
          </li>
          <li class="nav-item" role="presentation">
            <button class="nav-link" id="csv-tab" data-bs-toggle="tab" data-bs-target="#csv-files" type="button" role="tab">CSV</button>
          </li>
          <li class="nav-item" role="presentation">
            <button class="nav-link" id="uploads-tab" data-bs-toggle="tab" data-bs-target="#upload-files" type="button" role="tab">Uploads</button>
          </li>
        </ul>
        <div class="tab-content mt-3" id="dataFileTabsContent">
          <div class="tab-pane fade show active" id="json-files" role="tabpanel">
            <% if (jsonFiles && jsonFiles.length > 0) { %>
              <div class="list-group">
                <% jsonFiles.forEach(file => { %>
                  <button class="list-group-item list-group-item-action data-file-item" data-type="json" data-file="<%= file %>">
                    <i class="bi bi-filetype-json me-2"></i> <%= file %>
                  </button>
                <% }); %>
              </div>
            <% } else { %>
              <div class="alert alert-info">No JSON files found</div>
            <% } %>
          </div>
          <div class="tab-pane fade" id="csv-files" role="tabpanel">
            <% if (csvFiles && csvFiles.length > 0) { %>
              <div class="list-group">
                <% csvFiles.forEach(file => { %>
                  <button class="list-group-item list-group-item-action data-file-item" data-type="csv" data-file="<%= file %>">
                    <i class="bi bi-filetype-csv me-2"></i> <%= file %>
                  </button>
                <% }); %>
              </div>
            <% } else { %>
              <div class="alert alert-info">No CSV files found</div>
            <% } %>
          </div>
          <div class="tab-pane fade" id="upload-files" role="tabpanel">
            <% if (uploadFiles && uploadFiles.length > 0) { %>
              <div class="list-group">
                <% uploadFiles.forEach(file => { %>
                  <button class="list-group-item list-group-item-action data-file-item" data-type="upload" data-file="<%= file %>">
                    <i class="bi bi-file-earmark me-2"></i> <%= file %>
                  </button>
                <% }); %>
              </div>
            <% } else { %>
              <div class="alert alert-info">No uploaded files found</div>
            <% } %>
          </div>
        </div>
      </div>
      <div class="card-footer">
        <button class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#uploadModal">
          <i class="bi bi-upload me-2"></i> Upload Data
        </button>
      </div>
    </div>
  </div>
  
  <div class="col-md-8">
    <div class="card">
      <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="card-title" id="dataPreviewTitle">Data Preview</h5>
        <div class="btn-group">
          <button class="btn btn-sm btn-outline-primary" id="analyzeDataBtn" disabled>
            <i class="bi bi-bar-chart me-1"></i> Analyze
          </button>
          <button class="btn btn-sm btn-outline-success" id="visualizeDataBtn" disabled>
            <i class="bi bi-graph-up me-1"></i> Visualize
          </button>
        </div>
      </div>
      <div class="card-body">
        <div id="dataPreview">
          <div class="alert alert-info">
            <i class="bi bi-info-circle me-2"></i> Select a file to preview its data
          </div>
        </div>
      </div>
    </div>
    
    <div class="card mt-4" id="dataAnalysisCard" style="display: none;">
      <div class="card-header">
        <h5 class="card-title">Data Analysis</h5>
      </div>
      <div class="card-body">
        <div class="row mb-3">
          <div class="col-md-6">
            <label for="analysisColumn" class="form-label">Select Column</label>
            <select class="form-select" id="analysisColumn">
              <option value="">Select a column...</option>
            </select>
          </div>
          <div class="col-md-6">
            <label for="analysisType" class="form-label">Analysis Type</label>
            <select class="form-select" id="analysisType">
              <option value="stats">Statistics</option>
              <option value="frequency">Frequency Distribution</option>
              <option value="top">Top Values</option>
            </select>
          </div>
        </div>
        <button class="btn btn-primary" id="runAnalysisBtn">Run Analysis</button>
        <hr>
        <div id="analysisResults"></div>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    let currentData = null;
    
    // Handle file selection
    const dataFileItems = document.querySelectorAll('.data-file-item');
    dataFileItems.forEach(item => {
      item.addEventListener('click', async () => {
        // Clear previous selection
        dataFileItems.forEach(i => i.classList.remove('active'));
        item.classList.add('active');
        
        const fileType = item.getAttribute('data-type');
        const fileName = item.getAttribute('data-file');
        
        document.getElementById('dataPreviewTitle').textContent = `Data Preview: ${fileName}`;
        document.getElementById('dataPreview').innerHTML = `
          <div class="text-center p-4">
            <div class="spinner-border text-primary" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Loading data...</p>
          </div>
        `;
        
        try {
          const response = await fetch(`/api/data/${fileType}/${fileName}`);
          const result = await response.json();
          
          if (result.error) {
            document.getElementById('dataPreview').innerHTML = `
              <div class="alert alert-danger">
                <i class="bi bi-exclamation-triangle me-2"></i> ${result.error}
              </div>
            `;
            return;
          }
          
          currentData = result.data;
          
          // Enable buttons
          document.getElementById('analyzeDataBtn').disabled = false;
          document.getElementById('visualizeDataBtn').disabled = false;
          
          // Render data preview table
          renderDataPreview(currentData);
          
          // Update analysis column dropdown
          updateAnalysisColumns(currentData);
        } catch (error) {
          document.getElementById('dataPreview').innerHTML = `
            <div class="alert alert-danger">
              <i class="bi bi-exclamation-triangle me-2"></i> Error loading data: ${error.message}
            </div>
          `;
        }
      });
    });
    
    // Render data preview table
    function renderDataPreview(data) {
      if (!Array.isArray(data) || data.length === 0) {
        document.getElementById('dataPreview').innerHTML = `
          <div class="alert alert-warning">
            <i class="bi bi-exclamation-triangle me-2"></i> No data to display
          </div>
        `;
        return;
      }
      
      const columns = Object.keys(data[0]);
      const previewData = data.slice(0, 10); // Show first 10 rows
      
      let tableHtml = `
        <div class="table-responsive">
          <table class="table table-striped table-hover">
            <thead>
              <tr>
                ${columns.map(col => `<th>${col}</th>`).join('')}
              </tr>
            </thead>
            <tbody>
      `;
      
      previewData.forEach(row => {
        tableHtml += '<tr>';
        columns.forEach(col => {
          tableHtml += `<td>${row[col] !== null && row[col] !== undefined ? row[col] : ''}</td>`;
        });
        tableHtml += '</tr>';
      });
      
      tableHtml += `
            </tbody>
          </table>
        </div>
      `;
      
      if (data.length > 10) {
        tableHtml += `
          <div class="text-muted small">
            Showing 10 of ${data.length} rows
          </div>
        `;
      }
      
      document.getElementById('dataPreview').innerHTML = tableHtml;
    }
    
    // Update analysis columns dropdown
    function updateAnalysisColumns(data) {
      if (!Array.isArray(data) || data.length === 0) return;
      
      const columns = Object.keys(data[0]);
      const columnSelect = document.getElementById('analysisColumn');
      
      // Clear previous options
      columnSelect.innerHTML = '<option value="">Select a column...</option>';
      
      // Add new options
      columns.forEach(col => {
        const option = document.createElement('option');
        option.value = col;
        option.textContent = col;
        columnSelect.appendChild(option);
      });
    }
    
    // Handle analyze button click
    document.getElementById('analyzeDataBtn').addEventListener('click', () => {
      const analysisCard = document.getElementById('dataAnalysisCard');
      analysisCard.style.display = 'block';
      
      // Scroll to analysis card
      analysisCard.scrollIntoView({ behavior: 'smooth' });
    });
    
    // Handle visualize button click
    document.getElementById('visualizeDataBtn').addEventListener('click', () => {
      // Store current data in session storage
      sessionStorage.setItem('visualizeData', JSON.stringify(currentData));
      
      // Redirect to visualize page
      window.location.href = '/visualize';
    });
    
    // Handle run analysis button click
    document.getElementById('runAnalysisBtn').addEventListener('click', async () => {
      const column = document.getElementById('analysisColumn').value;
      const analysisType = document.getElementById('analysisType').value;
      const resultsContainer = document.getElementById('analysisResults');
      
      if (!column) {
        resultsContainer.innerHTML = `
          <div class="alert alert-warning">
            <i class="bi bi-exclamation-triangle me-2"></i> Please select a column to analyze
          </div>
        `;
        return;
      }
      
      resultsContainer.innerHTML = `
        <div class="text-center p-4">
          <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
          <p class="mt-2">Running analysis...</p>
        </div>
      `;
      
      try {
        const response = await fetch('/api/analyze', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            data: currentData,
            column,
            operation: analysisType
          })
        });
        
        const result = await response.json();
        
        if (result.error) {
          resultsContainer.innerHTML = `
            <div class="alert alert-danger">
              <i class="bi bi-exclamation-triangle me-2"></i> ${result.error}
            </div>
          `;
          return;
        }
        
        // Render analysis results
        renderAnalysisResults(analysisType, column, result.result);
      } catch (error) {
        resultsContainer.innerHTML = `
          <div class="alert alert-danger">
            <i class="bi bi-exclamation-triangle me-2"></i> Error running analysis: ${error.message}
          </div>
        `;
      }
    });
    
    // Render analysis results
    function renderAnalysisResults(type, column, data) {
      const resultsContainer = document.getElementById('analysisResults');
      
      if (type === 'stats') {
        resultsContainer.innerHTML = `
          <h5>Statistics for ${column}</h5>
          <div class="row">
            <div class="col-md-6">
              <table class="table table-sm">
                <tbody>
                  <tr>
                    <th>Count</th>
                    <td>${data.count}</td>
                  </tr>
                  <tr>
                    <th>Minimum</th>
                    <td>${data.min.toFixed(2)}</td>
                  </tr>
                  <tr>
                    <th>Maximum</th>
                    <td>${data.max.toFixed(2)}</td>
                  </tr>
                  <tr>
                    <th>Mean</th>
                    <td>${data.mean.toFixed(2)}</td>
                  </tr>
                  <tr>
                    <th>Median</th>
                    <td>${data.median.toFixed(2)}</td>
                  </tr>
                </tbody>
              </table>
            </div>
            <div class="col-md-6">
              <table class="table table-sm">
                <tbody>
                  <tr>
                    <th>Standard Deviation</th>
                    <td>${data.stdDev.toFixed(2)}</td>
                  </tr>
                  <tr>
                    <th>25th Percentile</th>
                    <td>${data.percentile25.toFixed(2)}</td>
                  </tr>
                  <tr>
                    <th>75th Percentile</th>
                    <td>${data.percentile75.toFixed(2)}</td>
                  </tr>
                  <tr>
                    <th>90th Percentile</th>
                    <td>${data.percentile90.toFixed(2)}</td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
          <div class="mt-3">
            <button class="btn btn-sm btn-outline-primary" id="generateStatsChartBtn">
              <i class="bi bi-bar-chart me-1"></i> Generate Chart
            </button>
          </div>
        `;
        
        // Add event listener for chart generation
        document.getElementById('generateStatsChartBtn').addEventListener('click', () => {
          // Create histogram data
          const chartData = {
            labels: ['Min', 'P25', 'Median', 'P75', 'Max'],
            datasets: [{
              label: column,
              data: [data.min, data.percentile25, data.median, data.percentile75, data.max],
              backgroundColor: 'rgba(54, 162, 235, 0.5)',
              borderColor: 'rgb(54, 162, 235)',
              borderWidth: 1
            }]
          };
          
          generateChart('bar', chartData, { title: `Statistics for ${column}` });
        });
      } else if (type === 'frequency') {
        const labels = Object.keys(data.counts);
        const values = Object.values(data.counts);
        const percentages = Object.values(data.percentages);
        
        resultsContainer.innerHTML = `
          <h5>Frequency Distribution for ${column}</h5>
          <div class="table-responsive">
            <table class="table table-sm table-striped">
              <thead>
                <tr>
                  <th>${column}</th>
                  <th>Count</th>
                  <th>Percentage</th>
                </tr>
              </thead>
              <tbody>
                ${labels.map((label, i) => `
                  <tr>
                    <td>${label}</td>
                    <td>${values[i]}</td>
                    <td>${percentages[i].toFixed(2)}%</td>
                  </tr>
                `).join('')}
              </tbody>
              <tfoot>
                <tr>
                  <th>Total</th>
                  <th>${data.total}</th>
                  <th>100%</th>
                </tr>
              </tfoot>
            </table>
          </div>
          <div class="mt-3">
            <button class="btn btn-sm btn-outline-primary" id="generatePieChartBtn">
              <i class="bi bi-pie-chart me-1"></i> Generate Pie Chart
            </button>
            <button class="btn btn-sm btn-outline-primary ms-2" id="generateBarChartBtn">
              <i class="bi bi-bar-chart me-1"></i> Generate Bar Chart
            </button>
          </div>
        `;
        
        // Add event listeners for chart generation
        document.getElementById('generatePieChartBtn').addEventListener('click', () => {
          const chartData = {
            labels,
            data: values,
            backgroundColor: [
              'rgba(255, 99, 132, 0.5)',
              'rgba(54, 162, 235, 0.5)',
              'rgba(255, 206, 86, 0.5)',
              'rgba(75, 192, 192, 0.5)',
              'rgba(153, 102, 255, 0.5)',
              'rgba(255, 159, 64, 0.5)'
            ]
          };
          
          generateChart('pie', chartData, { title: `Distribution of ${column}` });
        });
        
        document.getElementById('generateBarChartBtn').addEventListener('click', () => {
          const chartData = {
            labels,
            datasets: [{
              label: 'Count',
              data: values,
              backgroundColor: 'rgba(54, 162, 235, 0.5)',
              borderColor: 'rgb(54, 162, 235)',
              borderWidth: 1
            }]
          };
          
          generateChart('bar', chartData, { title: `Distribution of ${column}` });
        });
      } else if (type === 'top') {
        resultsContainer.innerHTML = `
          <h5>Top Values for ${column}</h5>
          <div class="table-responsive">
            <table class="table table-sm table-striped">
              <thead>
                <tr>
                  ${Object.keys(data[0]).map(key => `<th>${key}</th>`).join('')}
                </tr>
              </thead>
              <tbody>
                ${data.map(row => `
                  <tr>
                    ${Object.values(row).map(val => `<td>${val !== null && val !== undefined ? val : ''}</td>`).join('')}
                  </tr>
                `).join('')}
              </tbody>
            </table>
          </div>
        `;
      }
    }
    
    // Generate chart
    async function generateChart(type, data, options) {
      try {
        const response = await fetch('/api/visualize', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ type, data, options })
        });
        
        const result = await response.json();
        
        if (result.error) {
          alert(`Error generating chart: ${result.error}`);
          return;
        }
        
        // Open chart in new window
        window.open(result.chart.path, '_blank');
      } catch (error) {
        alert(`Error generating chart: ${error.message}`);
      }
    }
  });
</script>