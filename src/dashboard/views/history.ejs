<div class="row mb-4">
  <div class="col-md-12">
    <div class="card">
      <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="card-title">Report History</h5>
        <div>
          <button class="btn btn-sm btn-outline-primary" id="refreshBtn">
            <i class="bi bi-arrow-clockwise me-1"></i> Refresh
          </button>
          <button class="btn btn-sm btn-outline-danger" id="cleanupBtn">
            <i class="bi bi-trash me-1"></i> Cleanup Old Reports
          </button>
        </div>
      </div>
      <div class="card-body">
        <div class="row mb-4">
          <div class="col-md-3">
            <div class="mb-3">
              <label for="searchInput" class="form-label">Search</label>
              <input type="text" class="form-control" id="searchInput" placeholder="Search reports...">
            </div>
          </div>
          <div class="col-md-3">
            <div class="mb-3">
              <label for="scheduleFilter" class="form-label">Schedule</label>
              <select class="form-select" id="scheduleFilter">
                <option value="">All Schedules</option>
              </select>
            </div>
          </div>
          <div class="col-md-3">
            <div class="mb-3">
              <label for="tagFilter" class="form-label">Tag</label>
              <select class="form-select" id="tagFilter">
                <option value="">All Tags</option>
              </select>
            </div>
          </div>
          <div class="col-md-3">
            <div class="mb-3">
              <label for="dateRangeFilter" class="form-label">Date Range</label>
              <select class="form-select" id="dateRangeFilter">
                <option value="">All Time</option>
                <option value="today">Today</option>
                <option value="yesterday">Yesterday</option>
                <option value="week">This Week</option>
                <option value="month">This Month</option>
                <option value="custom">Custom Range</option>
              </select>
            </div>
          </div>
        </div>
        
        <div class="row mb-4" id="customDateRange" style="display: none;">
          <div class="col-md-6">
            <div class="mb-3">
              <label for="startDate" class="form-label">Start Date</label>
              <input type="date" class="form-control" id="startDate">
            </div>
          </div>
          <div class="col-md-6">
            <div class="mb-3">
              <label for="endDate" class="form-label">End Date</label>
              <input type="date" class="form-control" id="endDate">
            </div>
          </div>
        </div>
        
        <div id="reportsContainer">
          <div class="text-center p-4">
            <div class="spinner-border text-primary" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Loading reports...</p>
          </div>
        </div>
        
        <div class="d-flex justify-content-between align-items-center mt-4">
          <div>
            <span id="reportCount">0</span> reports found
          </div>
          <div>
            <button class="btn btn-sm btn-outline-primary" id="prevPageBtn" disabled>
              <i class="bi bi-chevron-left"></i> Previous
            </button>
            <span id="pageInfo" class="mx-2">Page 1</span>
            <button class="btn btn-sm btn-outline-primary" id="nextPageBtn" disabled>
              Next <i class="bi bi-chevron-right"></i>
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<div class="row">
  <div class="col-md-6">
    <div class="card">
      <div class="card-header">
        <h5 class="card-title">Reports by Schedule</h5>
      </div>
      <div class="card-body">
        <canvas id="scheduleChart" height="300"></canvas>
      </div>
    </div>
  </div>
  <div class="col-md-6">
    <div class="card">
      <div class="card-header">
        <h5 class="card-title">Reports by Month</h5>
      </div>
      <div class="card-body">
        <canvas id="monthChart" height="300"></canvas>
      </div>
    </div>
  </div>
</div>

<!-- Report Details Modal -->
<div class="modal fade" id="reportDetailsModal" tabindex="-1">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="reportTitle">Report Details</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div id="reportDetails">
          <div class="text-center p-4">
            <div class="spinner-border text-primary" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Loading report details...</p>
          </div>
        </div>
        
        <div class="mt-4">
          <h6>Tags</h6>
          <div id="reportTags" class="mb-2"></div>
          <div class="input-group">
            <input type="text" class="form-control" id="newTagInput" placeholder="Add tag...">
            <button class="btn btn-outline-primary" type="button" id="addTagBtn">Add</button>
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-danger me-auto" id="deleteReportBtn">Delete</button>
        <a href="#" class="btn btn-primary" id="viewReportBtn" target="_blank">View Report</a>
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<!-- Cleanup Modal -->
<div class="modal fade" id="cleanupModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Cleanup Old Reports</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <p>Delete reports older than:</p>
        <div class="mb-3">
          <select class="form-select" id="cleanupAge">
            <option value="7">7 days</option>
            <option value="30" selected>30 days</option>
            <option value="90">90 days</option>
            <option value="180">180 days</option>
            <option value="365">1 year</option>
          </select>
        </div>
        <div class="form-check">
          <input class="form-check-input" type="checkbox" id="deleteFilesCheck" checked>
          <label class="form-check-label" for="deleteFilesCheck">
            Also delete report files
          </label>
        </div>
        <div class="alert alert-warning mt-3">
          <i class="bi bi-exclamation-triangle me-2"></i> This action cannot be undone.
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-danger" id="confirmCleanupBtn">Delete Old Reports</button>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // State variables
    let currentPage = 1;
    let pageSize = 20;
    let totalReports = 0;
    let currentReport = null;
    let scheduleChart = null;
    let monthChart = null;
    
    // Initialize
    loadReports();
    loadTags();
    loadSchedules();
    loadStatistics();
    
    // Event listeners
    document.getElementById('refreshBtn').addEventListener('click', () => {
      loadReports();
      loadStatistics();
    });
    
    document.getElementById('cleanupBtn').addEventListener('click', () => {
      const modal = new bootstrap.Modal(document.getElementById('cleanupModal'));
      modal.show();
    });
    
    document.getElementById('confirmCleanupBtn').addEventListener('click', async () => {
      const maxAgeDays = document.getElementById('cleanupAge').value;
      const deleteFiles = document.getElementById('deleteFilesCheck').checked;
      
      try {
        const response = await fetch('/api/history/cleanup', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ maxAgeDays, deleteFiles })
        });
        
        const result = await response.json();
        
        if (result.error) {
          showToast(`Error: ${result.error}`, 'danger');
          return;
        }
        
        showToast(`Deleted ${result.deletedCount} old reports`, 'success');
        
        // Close modal
        const modal = bootstrap.Modal.getInstance(document.getElementById('cleanupModal'));
        modal.hide();
        
        // Reload reports and statistics
        loadReports();
        loadStatistics();
      } catch (error) {
        console.error('Error cleaning up reports:', error);
        showToast(`Error: ${error.message}`, 'danger');
      }
    });
    
    document.getElementById('searchInput').addEventListener('input', debounce(() => {
      currentPage = 1;
      loadReports();
    }, 300));
    
    document.getElementById('scheduleFilter').addEventListener('change', () => {
      currentPage = 1;
      loadReports();
    });
    
    document.getElementById('tagFilter').addEventListener('change', () => {
      currentPage = 1;
      loadReports();
    });
    
    document.getElementById('dateRangeFilter').addEventListener('change', () => {
      const dateRange = document.getElementById('dateRangeFilter').value;
      const customDateRange = document.getElementById('customDateRange');
      
      if (dateRange === 'custom') {
        customDateRange.style.display = 'flex';
      } else {
        customDateRange.style.display = 'none';
        currentPage = 1;
        loadReports();
      }
    });
    
    document.getElementById('startDate').addEventListener('change', () => {
      currentPage = 1;
      loadReports();
    });
    
    document.getElementById('endDate').addEventListener('change', () => {
      currentPage = 1;
      loadReports();
    });
    
    document.getElementById('prevPageBtn').addEventListener('click', () => {
      if (currentPage > 1) {
        currentPage--;
        loadReports();
      }
    });
    
    document.getElementById('nextPageBtn').addEventListener('click', () => {
      if (currentPage * pageSize < totalReports) {
        currentPage++;
        loadReports();
      }
    });
    
    document.getElementById('addTagBtn').addEventListener('click', async () => {
      const tagInput = document.getElementById('newTagInput');
      const tag = tagInput.value.trim();
      
      if (!tag || !currentReport) return;
      
      try {
        const response = await fetch(`/api/history/${currentReport.id}/tags`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ tags: [tag] })
        });
        
        const result = await response.json();
        
        if (result.error) {
          showToast(`Error: ${result.error}`, 'danger');
          return;
        }
        
        // Clear input
        tagInput.value = '';
        
        // Reload report details
        loadReportDetails(currentReport.id);
        
        // Reload tags filter
        loadTags();
      } catch (error) {
        console.error('Error adding tag:', error);
        showToast(`Error: ${error.message}`, 'danger');
      }
    });
    
    document.getElementById('deleteReportBtn').addEventListener('click', async () => {
      if (!currentReport) return;
      
      if (!confirm(`Are you sure you want to delete this report: ${currentReport.title}?`)) {
        return;
      }
      
      try {
        const response = await fetch(`/api/history/${currentReport.id}?deleteFile=true`, {
          method: 'DELETE'
        });
        
        const result = await response.json();
        
        if (result.error) {
          showToast(`Error: ${result.error}`, 'danger');
          return;
        }
        
        showToast('Report deleted successfully', 'success');
        
        // Close modal
        const modal = bootstrap.Modal.getInstance(document.getElementById('reportDetailsModal'));
        modal.hide();
        
        // Reload reports and statistics
        loadReports();
        loadStatistics();
      } catch (error) {
        console.error('Error deleting report:', error);
        showToast(`Error: ${error.message}`, 'danger');
      }
    });
    
    // Load reports
    async function loadReports() {
      try {
        const reportsContainer = document.getElementById('reportsContainer');
        reportsContainer.innerHTML = `
          <div class="text-center p-4">
            <div class="spinner-border text-primary" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Loading reports...</p>
          </div>
        `;
        
        // Build query parameters
        const params = new URLSearchParams();
        params.append('limit', pageSize);
        params.append('offset', (currentPage - 1) * pageSize);
        
        const search = document.getElementById('searchInput').value.trim();
        if (search) {
          params.append('search', search);
        }
        
        const scheduleId = document.getElementById('scheduleFilter').value;
        if (scheduleId) {
          params.append('scheduleId', scheduleId);
        }
        
        const tag = document.getElementById('tagFilter').value;
        if (tag) {
          params.append('tags', tag);
        }
        
        // Handle date range
        const dateRange = document.getElementById('dateRangeFilter').value;
        let startDate, endDate;
        
        if (dateRange === 'custom') {
          startDate = document.getElementById('startDate').value;
          endDate = document.getElementById('endDate').value;
        } else if (dateRange === 'today') {
          startDate = new Date().toISOString().split('T')[0];
          endDate = new Date().toISOString().split('T')[0];
        } else if (dateRange === 'yesterday') {
          const yesterday = new Date();
          yesterday.setDate(yesterday.getDate() - 1);
          startDate = yesterday.toISOString().split('T')[0];
          endDate = yesterday.toISOString().split('T')[0];
        } else if (dateRange === 'week') {
          const today = new Date();
          const dayOfWeek = today.getDay();
          const startOfWeek = new Date(today);
          startOfWeek.setDate(today.getDate() - dayOfWeek);
          startDate = startOfWeek.toISOString().split('T')[0];
          endDate = new Date().toISOString().split('T')[0];
        } else if (dateRange === 'month') {
          const today = new Date();
          const startOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
          startDate = startOfMonth.toISOString().split('T')[0];
          endDate = new Date().toISOString().split('T')[0];
        }
        
        if (startDate) {
          params.append('startDate', startDate);
        }
        
        if (endDate) {
          params.append('endDate', endDate);
        }
        
        const response = await fetch(`/api/history?${params.toString()}`);
        const data = await response.json();
        
        if (data.error) {
          reportsContainer.innerHTML = `
            <div class="alert alert-danger">
              <i class="bi bi-exclamation-triangle me-2"></i> ${data.error}
            </div>
          `;
          return;
        }
        
        totalReports = data.total;
        
        // Update pagination
        document.getElementById('reportCount').textContent = totalReports;
        document.getElementById('pageInfo').textContent = `Page ${currentPage} of ${Math.ceil(totalReports / pageSize) || 1}`;
        document.getElementById('prevPageBtn').disabled = currentPage <= 1;
        document.getElementById('nextPageBtn').disabled = currentPage * pageSize >= totalReports;
        
        if (data.reports.length === 0) {
          reportsContainer.innerHTML = `
            <div class="alert alert-info">
              <i class="bi bi-info-circle me-2"></i> No reports found
            </div>
          `;
          return;
        }
        
        // Render reports
        let html = '<div class="table-responsive">';
        html += `
          <table class="table table-striped table-hover">
            <thead>
              <tr>
                <th>Title</th>
                <th>Schedule</th>
                <th>Date</th>
                <th>Tags</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
        `;
        
        data.reports.forEach(report => {
          const date = new Date(report.timestamp).toLocaleString();
          
          html += `
            <tr>
              <td>${report.title}</td>
              <td>${report.scheduleName || 'N/A'}</td>
              <td>${date}</td>
              <td>
                ${(report.tags || []).map(tag => `
                  <span class="badge bg-secondary">${tag}</span>
                `).join(' ')}
              </td>
              <td>
                <div class="btn-group btn-group-sm">
                  <button class="btn btn-outline-primary view-report-btn" data-id="${report.id}">
                    <i class="bi bi-eye"></i>
                  </button>
                  <a href="/charts/${report.path}" class="btn btn-outline-success" target="_blank">
                    <i class="bi bi-file-earmark-bar-graph"></i>
                  </a>
                  <button class="btn btn-outline-info report-details-btn" data-id="${report.id}">
                    <i class="bi bi-info-circle"></i>
                  </button>
                </div>
              </td>
            </tr>
          `;
        });
        
        html += `
            </tbody>
          </table>
        </div>
        `;
        
        reportsContainer.innerHTML = html;
        
        // Add event listeners to buttons
        document.querySelectorAll('.report-details-btn').forEach(btn => {
          btn.addEventListener('click', () => {
            const reportId = btn.getAttribute('data-id');
            openReportDetailsModal(reportId);
          });
        });
        
        document.querySelectorAll('.view-report-btn').forEach(btn => {
          btn.addEventListener('click', () => {
            const reportId = btn.getAttribute('data-id');
            const report = data.reports.find(r => r.id === reportId);
            if (report) {
              window.open(`/charts/${report.path}`, '_blank');
            }
          });
        });
      } catch (error) {
        console.error('Error loading reports:', error);
        document.getElementById('reportsContainer').innerHTML = `
          <div class="alert alert-danger">
            <i class="bi bi-exclamation-triangle me-2"></i> Error loading reports: ${error.message}
          </div>
        `;
      }
    }
    
    // Load tags for filter
    async function loadTags() {
      try {
        const response = await fetch('/api/history/tags');
        const data = await response.json();
        
        if (data.error) {
          console.error('Error loading tags:', data.error);
          return;
        }
        
        const tagFilter = document.getElementById('tagFilter');
        const currentValue = tagFilter.value;
        
        // Clear options except first
        tagFilter.innerHTML = '<option value="">All Tags</option>';
        
        // Add tags
        data.tags.forEach(tag => {
          const option = document.createElement('option');
          option.value = tag;
          option.textContent = tag;
          tagFilter.appendChild(option);
        });
        
        // Restore selected value if possible
        if (currentValue && data.tags.includes(currentValue)) {
          tagFilter.value = currentValue;
        }
      } catch (error) {
        console.error('Error loading tags:', error);
      }
    }
    
    // Load schedules for filter
    async function loadSchedules() {
      try {
        const response = await fetch('/api/schedules');
        const data = await response.json();
        
        if (data.error) {
          console.error('Error loading schedules:', data.error);
          return;
        }
        
        const scheduleFilter = document.getElementById('scheduleFilter');
        const currentValue = scheduleFilter.value;
        
        // Clear options except first
        scheduleFilter.innerHTML = '<option value="">All Schedules</option>';
        
        // Add schedules
        data.schedules.forEach(schedule => {
          const option = document.createElement('option');
          option.value = schedule.id;
          option.textContent = schedule.name;
          scheduleFilter.appendChild(option);
        });
        
        // Restore selected value if possible
        if (currentValue) {
          scheduleFilter.value = currentValue;
        }
      } catch (error) {
        console.error('Error loading schedules:', error);
      }
    }
    
    // Load statistics
    async function loadStatistics() {
      try {
        const response = await fetch('/api/history/stats');
        const stats = await response.json();
        
        if (stats.error) {
          console.error('Error loading statistics:', stats.error);
          return;
        }
        
        // Create schedule chart
        const scheduleData = {
          labels: Object.values(stats.scheduleStats).map(s => s.name),
          datasets: [{
            label: 'Reports',
            data: Object.values(stats.scheduleStats).map(s => s.count),
            backgroundColor: [
              'rgba(255, 99, 132, 0.5)',
              'rgba(54, 162, 235, 0.5)',
              'rgba(255, 206, 86, 0.5)',
              'rgba(75, 192, 192, 0.5)',
              'rgba(153, 102, 255, 0.5)',
              'rgba(255, 159, 64, 0.5)'
            ]
          }]
        };
        
        // Create month chart
        const months = Object.keys(stats.monthStats).sort();
        const monthData = {
          labels: months.map(m => {
            const [year, month] = m.split('-');
            return `${month}/${year}`;
          }),
          datasets: [{
            label: 'Reports',
            data: months.map(m => stats.monthStats[m]),
            backgroundColor: 'rgba(54, 162, 235, 0.5)',
            borderColor: 'rgba(54, 162, 235, 1)',
            borderWidth: 1
          }]
        };
        
        // Render charts
        renderScheduleChart(scheduleData);
        renderMonthChart(monthData);
      } catch (error) {
        console.error('Error loading statistics:', error);
      }
    }
    
    // Render schedule chart
    function renderScheduleChart(data) {
      const ctx = document.getElementById('scheduleChart').getContext('2d');
      
      if (scheduleChart) {
        scheduleChart.destroy();
      }
      
      scheduleChart = new Chart(ctx, {
        type: 'pie',
        data: data,
        options: {
          responsive: true,
          plugins: {
            legend: {
              position: 'right'
            }
          }
        }
      });
    }
    
    // Render month chart
    function renderMonthChart(data) {
      const ctx = document.getElementById('monthChart').getContext('2d');
      
      if (monthChart) {
        monthChart.destroy();
      }
      
      monthChart = new Chart(ctx, {
        type: 'bar',
        data: data,
        options: {
          responsive: true,
          scales: {
            y: {
              beginAtZero: true
            }
          }
        }
      });
    }
    
    // Open report details modal
    async function openReportDetailsModal(reportId) {
      const modal = new bootstrap.Modal(document.getElementById('reportDetailsModal'));
      modal.show();
      
      await loadReportDetails(reportId);
    }
    
    // Load report details
    async function loadReportDetails(reportId) {
      try {
        const reportDetails = document.getElementById('reportDetails');
        const reportTags = document.getElementById('reportTags');
        
        reportDetails.innerHTML = `
          <div class="text-center p-4">
            <div class="spinner-border text-primary" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Loading report details...</p>
          </div>
        `;
        
        reportTags.innerHTML = '';
        
        const response = await fetch(`/api/history/${reportId}`);
        const data = await response.json();
        
        if (data.error) {
          reportDetails.innerHTML = `
            <div class="alert alert-danger">
              <i class="bi bi-exclamation-triangle me-2"></i> ${data.error}
            </div>
          `;
          return;
        }
        
        currentReport = data.report;
        
        // Update modal title
        document.getElementById('reportTitle').textContent = currentReport.title;
        
        // Update view report button
        document.getElementById('viewReportBtn').href = `/charts/${currentReport.path}`;
        
        // Format date
        const date = new Date(currentReport.timestamp).toLocaleString();
        
        // Render report details
        reportDetails.innerHTML = `
          <div class="row">
            <div class="col-md-6">
              <p><strong>Title:</strong> ${currentReport.title}</p>
              <p><strong>Schedule:</strong> ${currentReport.scheduleName || 'N/A'}</p>
              <p><strong>Date:</strong> ${date}</p>
            </div>
            <div class="col-md-6">
              <p><strong>ID:</strong> ${currentReport.id}</p>
              <p><strong>Path:</strong> ${currentReport.path}</p>
            </div>
          </div>
        `;
        
        // Render tags
        renderTags(currentReport.tags || []);
      } catch (error) {
        console.error('Error loading report details:', error);
        document.getElementById('reportDetails').innerHTML = `
          <div class="alert alert-danger">
            <i class="bi bi-exclamation-triangle me-2"></i> Error loading report details: ${error.message}
          </div>
        `;
      }
    }
    
    // Render tags
    function renderTags(tags) {
      const reportTags = document.getElementById('reportTags');
      reportTags.innerHTML = '';
      
      if (tags.length === 0) {
        reportTags.innerHTML = '<p class="text-muted">No tags</p>';
        return;
      }
      
      tags.forEach(tag => {
        const tagElement = document.createElement('span');
        tagElement.className = 'badge bg-secondary me-1 mb-1';
        tagElement.innerHTML = `
          ${tag}
          <button type="button" class="btn-close btn-close-white ms-1" aria-label="Remove tag" data-tag="${tag}"></button>
        `;
        reportTags.appendChild(tagElement);
      });
      
      // Add event listeners to remove buttons
      document.querySelectorAll('#reportTags .btn-close').forEach(btn => {
        btn.addEventListener('click', async () => {
          const tag = btn.getAttribute('data-tag');
          
          try {
            const response = await fetch(`/api/history/${currentReport.id}/tags`, {
              method: 'DELETE',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ tags: [tag] })
            });
            
            const result = await response.json();
            
            if (result.error) {
              showToast(`Error: ${result.error}`, 'danger');
              return;
            }
            
            // Reload report details
            loadReportDetails(currentReport.id);
            
            // Reload tags filter
            loadTags();
          } catch (error) {
            console.error('Error removing tag:', error);
            showToast(`Error: ${error.message}`, 'danger');
          }
        });
      });
    }
    
    // Debounce function
    function debounce(func, wait) {
      let timeout;
      return function() {
        const context = this;
        const args = arguments;
        clearTimeout(timeout);
        timeout = setTimeout(() => {
          func.apply(context, args);
        }, wait);
      };
    }
  });
</script>