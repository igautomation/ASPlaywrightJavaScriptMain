<script>
  document.addEventListener('DOMContentLoaded', () => {
    // State variables
    let templates = [];
    let currentTemplate = null;
    
    // Load templates
    loadTemplates();
    loadTags();
    
    // Event listeners
    document.getElementById('searchInput').addEventListener('input', debounce(() => {
      filterTemplates();
    }, 300));
    
    document.getElementById('tagFilter').addEventListener('change', () => {
      filterTemplates();
    });
    
    document.getElementById('sortBy').addEventListener('change', () => {
      filterTemplates();
    });
    
    document.getElementById('addChartBtn').addEventListener('click', () => {
      addChartConfig();
    });
    
    document.getElementById('saveTemplateBtn').addEventListener('click', () => {
      saveTemplate();
    });
    
    document.getElementById('editAddChartBtn').addEventListener('click', () => {
      addEditChartConfig();
    });
    
    document.getElementById('updateTemplateBtn').addEventListener('click', () => {
      updateTemplate();
    });
    
    document.getElementById('deleteTemplateBtn').addEventListener('click', () => {
      deleteTemplate();
    });
    
    document.getElementById('generateSampleDataBtn').addEventListener('click', () => {
      generateSampleData();
    });
    
    document.getElementById('cloneTemplateBtn').addEventListener('click', () => {
      cloneTemplate();
    });
    
    document.getElementById('useTemplateBtn').addEventListener('click', () => {
      openUseTemplateModal();
    });
    
    document.getElementById('createReportBtn').addEventListener('click', () => {
      createReportFromTemplate();
    });
    
    // Load templates
    async function loadTemplates() {
      try {
        const templatesContainer = document.getElementById('templatesContainer');
        templatesContainer.innerHTML = `
          <div class="text-center p-4">
            <div class="spinner-border text-primary" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Loading templates...</p>
          </div>
        `;
        
        const response = await fetch('/api/templates');
        const data = await response.json();
        
        if (data.error) {
          templatesContainer.innerHTML = `
            <div class="alert alert-danger">
              <i class="bi bi-exclamation-triangle me-2"></i> ${data.error}
            </div>
          `;
          return;
        }
        
        templates = data.templates;
        
        if (templates.length === 0) {
          templatesContainer.innerHTML = `
            <div class="alert alert-info">
              <i class="bi bi-info-circle me-2"></i> No templates found. Create a new template to get started.
            </div>
          `;
          document.getElementById('templateCardsContainer').innerHTML = '';
          return;
        }
        
        // Render templates
        renderTemplates(templates);
      } catch (error) {
        console.error('Error loading templates:', error);
        document.getElementById('templatesContainer').innerHTML = `
          <div class="alert alert-danger">
            <i class="bi bi-exclamation-triangle me-2"></i> Error loading templates: ${error.message}
          </div>
        `;
      }
    }
    
    // Load tags for filter
    async function loadTags() {
      try {
        const response = await fetch('/api/templates/tags');
        const data = await response.json();
        
        if (data.error) {
          console.error('Error loading tags:', data.error);
          return;
        }
        
        const tagFilter = document.getElementById('tagFilter');
        const currentValue = tagFilter.value;
        
        // Clear options except first
        tagFilter.innerHTML = '<option value="">All Tags</option>';
        
        // Add tags
        data.tags.forEach(tag => {
          const option = document.createElement('option');
          option.value = tag;
          option.textContent = tag;
          tagFilter.appendChild(option);
        });
        
        // Restore selected value if possible
        if (currentValue && data.tags.includes(currentValue)) {
          tagFilter.value = currentValue;
        }
      } catch (error) {
        console.error('Error loading tags:', error);
      }
    }
    
    // Filter templates
    function filterTemplates() {
      const searchTerm = document.getElementById('searchInput').value.toLowerCase();
      const tagFilter = document.getElementById('tagFilter').value;
      const sortBy = document.getElementById('sortBy').value;
      
      let filteredTemplates = [...templates];
      
      // Apply search filter
      if (searchTerm) {
        filteredTemplates = filteredTemplates.filter(template => 
          template.name.toLowerCase().includes(searchTerm) ||
          template.description.toLowerCase().includes(searchTerm)
        );
      }
      
      // Apply tag filter
      if (tagFilter) {
        filteredTemplates = filteredTemplates.filter(template => 
          template.tags && template.tags.includes(tagFilter)
        );
      }
      
      // Apply sorting
      filteredTemplates.sort((a, b) => {
        if (sortBy === 'name') {
          return a.name.localeCompare(b.name);
        } else if (sortBy === 'updatedAt') {
          return new Date(b.updatedAt) - new Date(a.updatedAt);
        } else if (sortBy === 'createdAt') {
          return new Date(b.createdAt) - new Date(a.createdAt);
        }
        return 0;
      });
      
      // Render filtered templates
      renderTemplates(filteredTemplates);
    }
    
    // Render templates
    function renderTemplates(templatesList) {
      const templatesContainer = document.getElementById('templatesContainer');
      const templateCardsContainer = document.getElementById('templateCardsContainer');
      
      // Clear containers
      templatesContainer.innerHTML = '';
      templateCardsContainer.innerHTML = '';
      
      // Create table view
      let tableHtml = '<div class="table-responsive">';
      tableHtml += `
        <table class="table table-striped table-hover">
          <thead>
            <tr>
              <th>Name</th>
              <th>Description</th>
              <th>Charts</th>
              <th>Tags</th>
              <th>Last Updated</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
      `;
      
      templatesList.forEach(template => {
        const updatedDate = new Date(template.updatedAt).toLocaleDateString();
        
        tableHtml += `
          <tr>
            <td>${template.name}</td>
            <td>${template.description || ''}</td>
            <td>${template.charts ? template.charts.length : 0}</td>
            <td>
              ${(template.tags || []).map(tag => `
                <span class="badge bg-secondary">${tag}</span>
              `).join(' ')}
            </td>
            <td>${updatedDate}</td>
            <td>
              <div class="btn-group btn-group-sm">
                <button class="btn btn-outline-primary template-details-btn" data-id="${template.id}">
                  <i class="bi bi-info-circle"></i>
                </button>
                <button class="btn btn-outline-secondary edit-template-btn" data-id="${template.id}">
                  <i class="bi bi-pencil"></i>
                </button>
                <button class="btn btn-outline-success use-template-btn" data-id="${template.id}">
                  <i class="bi bi-play-fill"></i>
                </button>
              </div>
            </td>
          </tr>
        `;
      });
      
      tableHtml += `
          </tbody>
        </table>
      </div>
      `;
      
      templatesContainer.innerHTML = tableHtml;
      
      // Create card view
      let cardsHtml = '<div class="row">';
      
      templatesList.forEach(template => {
        const updatedDate = new Date(template.updatedAt).toLocaleDateString();
        
        cardsHtml += `
          <div class="col-md-4 mb-4">
            <div class="card h-100">
              <div class="card-header">
                <h5 class="card-title">${template.name}</h5>
              </div>
              <div class="card-body">
                <p class="card-text">${template.description || 'No description'}</p>
                <p class="text-muted">Charts: ${template.charts ? template.charts.length : 0}</p>
                <div class="mb-2">
                  ${(template.tags || []).map(tag => `
                    <span class="badge bg-secondary">${tag}</span>
                  `).join(' ')}
                </div>
              </div>
              <div class="card-footer bg-transparent">
                <div class="d-flex justify-content-between align-items-center">
                  <small class="text-muted">Updated: ${updatedDate}</small>
                  <div class="btn-group btn-group-sm">
                    <button class="btn btn-outline-primary template-details-btn" data-id="${template.id}">
                      <i class="bi bi-info-circle"></i>
                    </button>
                    <button class="btn btn-outline-secondary edit-template-btn" data-id="${template.id}">
                      <i class="bi bi-pencil"></i>
                    </button>
                    <button class="btn btn-outline-success use-template-btn" data-id="${template.id}">
                      <i class="bi bi-play-fill"></i>
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        `;
      });
      
      cardsHtml += '</div>';
      
      templateCardsContainer.innerHTML = cardsHtml;
      
      // Add event listeners to buttons
      document.querySelectorAll('.template-details-btn').forEach(btn => {
        btn.addEventListener('click', () => {
          const templateId = btn.getAttribute('data-id');
          openTemplateDetailsModal(templateId);
        });
      });
      
      document.querySelectorAll('.edit-template-btn').forEach(btn => {
        btn.addEventListener('click', () => {
          const templateId = btn.getAttribute('data-id');
          openEditTemplateModal(templateId);
        });
      });
      
      document.querySelectorAll('.use-template-btn').forEach(btn => {
        btn.addEventListener('click', () => {
          const templateId = btn.getAttribute('data-id');
          openUseTemplateModal(templateId);
        });
      });
    }</script>