<div class="row mb-4">
  <div class="col-md-12">
    <div class="card">
      <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="card-title">Scheduled Reports</h5>
        <button class="btn btn-sm btn-primary" data-bs-toggle="modal" data-bs-target="#createScheduleModal">
          <i class="bi bi-plus-circle me-1"></i> Create Schedule
        </button>
      </div>
      <div class="card-body">
        <div id="schedulesContainer">
          <div class="text-center p-4">
            <div class="spinner-border text-primary" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Loading schedules...</p>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Create Schedule Modal -->
<div class="modal fade" id="createScheduleModal" tabindex="-1">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Create Schedule</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="scheduleForm">
          <div class="mb-3">
            <label for="scheduleName" class="form-label">Schedule Name</label>
            <input type="text" class="form-control" id="scheduleName" required>
          </div>
          
          <div class="mb-3">
            <label for="scheduleDescription" class="form-label">Description</label>
            <textarea class="form-control" id="scheduleDescription" rows="2"></textarea>
          </div>
          
          <div class="row mb-3">
            <div class="col-md-6">
              <label for="scheduleFrequency" class="form-label">Frequency</label>
              <select class="form-select" id="scheduleFrequency">
                <option value="daily">Daily</option>
                <option value="weekly">Weekly</option>
                <option value="monthly">Monthly</option>
                <option value="custom">Custom</option>
              </select>
            </div>
            <div class="col-md-6" id="customCronContainer" style="display: none;">
              <label for="customCron" class="form-label">Custom Cron Expression</label>
              <input type="text" class="form-control" id="customCron" placeholder="e.g. 0 0 * * *">
              <div class="form-text">Format: minute hour day month weekday</div>
            </div>
          </div>
          
          <div class="row mb-3" id="timeContainer">
            <div class="col-md-6">
              <label for="scheduleTime" class="form-label">Time</label>
              <input type="time" class="form-control" id="scheduleTime" value="08:00">
            </div>
            <div class="col-md-6">
              <label for="scheduleTimezone" class="form-label">Timezone</label>
              <select class="form-select" id="scheduleTimezone">
                <option value="UTC">UTC</option>
                <option value="America/New_York">Eastern Time (ET)</option>
                <option value="America/Chicago">Central Time (CT)</option>
                <option value="America/Denver">Mountain Time (MT)</option>
                <option value="America/Los_Angeles">Pacific Time (PT)</option>
                <option value="Europe/London">London (GMT)</option>
                <option value="Europe/Paris">Paris (CET)</option>
                <option value="Asia/Tokyo">Tokyo (JST)</option>
              </select>
            </div>
          </div>
          
          <div id="weekdayContainer" class="mb-3" style="display: none;">
            <label class="form-label">Day of Week</label>
            <div class="d-flex justify-content-between">
              <div class="form-check form-check-inline">
                <input class="form-check-input weekday-check" type="checkbox" id="weekday0" value="0">
                <label class="form-check-label" for="weekday0">Sun</label>
              </div>
              <div class="form-check form-check-inline">
                <input class="form-check-input weekday-check" type="checkbox" id="weekday1" value="1">
                <label class="form-check-label" for="weekday1">Mon</label>
              </div>
              <div class="form-check form-check-inline">
                <input class="form-check-input weekday-check" type="checkbox" id="weekday2" value="2">
                <label class="form-check-label" for="weekday2">Tue</label>
              </div>
              <div class="form-check form-check-inline">
                <input class="form-check-input weekday-check" type="checkbox" id="weekday3" value="3">
                <label class="form-check-label" for="weekday3">Wed</label>
              </div>
              <div class="form-check form-check-inline">
                <input class="form-check-input weekday-check" type="checkbox" id="weekday4" value="4">
                <label class="form-check-label" for="weekday4">Thu</label>
              </div>
              <div class="form-check form-check-inline">
                <input class="form-check-input weekday-check" type="checkbox" id="weekday5" value="5">
                <label class="form-check-label" for="weekday5">Fri</label>
              </div>
              <div class="form-check form-check-inline">
                <input class="form-check-input weekday-check" type="checkbox" id="weekday6" value="6">
                <label class="form-check-label" for="weekday6">Sat</label>
              </div>
            </div>
          </div>
          
          <div id="monthDayContainer" class="mb-3" style="display: none;">
            <label for="monthDay" class="form-label">Day of Month</label>
            <select class="form-select" id="monthDay">
              <option value="1">1st</option>
              <option value="2">2nd</option>
              <option value="3">3rd</option>
              <option value="4">4th</option>
              <option value="5">5th</option>
              <option value="10">10th</option>
              <option value="15">15th</option>
              <option value="20">20th</option>
              <option value="25">25th</option>
              <option value="last">Last day</option>
            </select>
          </div>
          
          <hr>
          
          <h6>Report Configuration</h6>
          
          <div class="mb-3">
            <label for="reportTitle" class="form-label">Report Title</label>
            <input type="text" class="form-control" id="reportTitle" required>
          </div>
          
          <div class="mb-3">
            <label for="dataSource" class="form-label">Data Source</label>
            <select class="form-select" id="dataSource">
              <option value="">Select a data source...</option>
              <option value="json">JSON Files</option>
              <option value="csv">CSV Files</option>
              <option value="upload">Uploaded Files</option>
            </select>
          </div>
          
          <div class="mb-3" id="fileSelectContainer" style="display: none;">
            <label for="fileName" class="form-label">File</label>
            <select class="form-select" id="fileName">
              <option value="">Select a file...</option>
            </select>
          </div>
          
          <div id="reportConfig" style="display: none;">
            <div class="mb-3">
              <label for="chartTypes" class="form-label">Charts to Include</label>
              <div class="form-check">
                <input class="form-check-input" type="checkbox" value="bar" id="barChartCheck" checked>
                <label class="form-check-label" for="barChartCheck">
                  Bar Chart
                </label>
              </div>
              <div class="form-check">
                <input class="form-check-input" type="checkbox" value="pie" id="pieChartCheck" checked>
                <label class="form-check-label" for="pieChartCheck">
                  Pie Chart
                </label>
              </div>
              <div class="form-check">
                <input class="form-check-input" type="checkbox" value="line" id="lineChartCheck">
                <label class="form-check-label" for="lineChartCheck">
                  Line Chart
                </label>
              </div>
              <div class="form-check">
                <input class="form-check-input" type="checkbox" value="table" id="tableCheck" checked>
                <label class="form-check-label" for="tableCheck">
                  Data Table
                </label>
              </div>
            </div>
            
            <div class="mb-3">
              <label for="columnsSelect" class="form-label">Columns to Analyze</label>
              <select class="form-select" id="columnsSelect" multiple>
                <!-- Columns will be populated dynamically -->
              </select>
              <div class="form-text">Hold Ctrl/Cmd to select multiple columns</div>
            </div>
          </div>
          
          <hr>
          
          <h6>Email Notifications</h6>
          
          <div class="mb-3">
            <label for="recipients" class="form-label">Recipients (comma-separated)</label>
            <input type="text" class="form-control" id="recipients" placeholder="email@example.com, another@example.com">
          </div>
          
          <div class="form-check form-switch mb-3">
            <input class="form-check-input" type="checkbox" id="activeSwitch" checked>
            <label class="form-check-label" for="activeSwitch">Active</label>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="saveScheduleBtn">Save Schedule</button>
      </div>
    </div>
  </div>
</div>

<!-- Edit Schedule Modal -->
<div class="modal fade" id="editScheduleModal" tabindex="-1">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Edit Schedule</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <!-- Same form as create, but with id prefix "edit" -->
        <form id="editScheduleForm">
          <input type="hidden" id="editScheduleId">
          <div class="mb-3">
            <label for="editScheduleName" class="form-label">Schedule Name</label>
            <input type="text" class="form-control" id="editScheduleName" required>
          </div>
          
          <!-- Additional form fields similar to create schedule form -->
          <!-- Omitted for brevity -->
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-danger me-auto" id="deleteScheduleBtn">Delete</button>
        <button type="button" class="btn btn-success" id="runNowBtn">Run Now</button>
        <button type="button" class="btn btn-primary" id="updateScheduleBtn">Update</button>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Load schedules
    loadSchedules();
    
    // Handle frequency selection
    const scheduleFrequency = document.getElementById('scheduleFrequency');
    const customCronContainer = document.getElementById('customCronContainer');
    const weekdayContainer = document.getElementById('weekdayContainer');
    const monthDayContainer = document.getElementById('monthDayContainer');
    const timeContainer = document.getElementById('timeContainer');
    
    scheduleFrequency.addEventListener('change', () => {
      const frequency = scheduleFrequency.value;
      
      customCronContainer.style.display = frequency === 'custom' ? 'block' : 'none';
      weekdayContainer.style.display = frequency === 'weekly' ? 'block' : 'none';
      monthDayContainer.style.display = frequency === 'monthly' ? 'block' : 'none';
      timeContainer.style.display = frequency === 'custom' ? 'none' : 'flex';
    });
    
    // Handle data source selection
    const dataSourceSelect = document.getElementById('dataSource');
    const fileSelectContainer = document.getElementById('fileSelectContainer');
    const fileNameSelect = document.getElementById('fileName');
    const reportConfig = document.getElementById('reportConfig');
    
    dataSourceSelect.addEventListener('change', () => {
      const source = dataSourceSelect.value;
      
      if (source) {
        fileSelectContainer.style.display = 'block';
        loadFileList(source);
      } else {
        fileSelectContainer.style.display = 'none';
        reportConfig.style.display = 'none';
      }
    });
    
    // Handle file selection
    fileNameSelect.addEventListener('change', async () => {
      const fileName = fileNameSelect.value;
      
      if (fileName) {
        try {
          // Load file data to get columns
          const response = await fetch(`/api/data/${dataSourceSelect.value}/${fileName}`);
          const result = await response.json();
          
          if (result.error) {
            alert(`Error: ${result.error}`);
            return;
          }
          
          // Populate columns select
          const columnsSelect = document.getElementById('columnsSelect');
          columnsSelect.innerHTML = '';
          
          const columns = Object.keys(result.data[0]);
          columns.forEach(col => {
            const option = document.createElement('option');
            option.value = col;
            option.textContent = col;
            columnsSelect.appendChild(option);
          });
          
          // Show report config
          reportConfig.style.display = 'block';
        } catch (error) {
          console.error('Error loading file data:', error);
          alert(`Error: ${error.message}`);
        }
      } else {
        reportConfig.style.display = 'none';
      }
    });
    
    // Handle save schedule button
    document.getElementById('saveScheduleBtn').addEventListener('click', saveSchedule);
    
    // Load file list
    async function loadFileList(fileType) {
      try {
        fileNameSelect.innerHTML = '<option value="">Loading...</option>';
        
        const response = await fetch(`/api/files/${fileType}`);
        const data = await response.json();
        
        fileNameSelect.innerHTML = '<option value="">Select a file...</option>';
        
        if (data.files && data.files.length > 0) {
          data.files.forEach(file => {
            const option = document.createElement('option');
            option.value = file;
            option.textContent = file;
            fileNameSelect.appendChild(option);
          });
        } else {
          const option = document.createElement('option');
          option.value = '';
          option.textContent = 'No files available';
          option.disabled = true;
          fileNameSelect.appendChild(option);
        }
      } catch (error) {
        console.error('Error loading file list:', error);
        fileNameSelect.innerHTML = '<option value="">Error loading files</option>';
      }
    }
    
    // Load schedules
    async function loadSchedules() {
      try {
        const schedulesContainer = document.getElementById('schedulesContainer');
        
        const response = await fetch('/api/schedules');
        const data = await response.json();
        
        if (data.error) {
          schedulesContainer.innerHTML = `
            <div class="alert alert-danger">
              <i class="bi bi-exclamation-triangle me-2"></i> ${data.error}
            </div>
          `;
          return;
        }
        
        if (!data.schedules || data.schedules.length === 0) {
          schedulesContainer.innerHTML = `
            <div class="alert alert-info">
              <i class="bi bi-info-circle me-2"></i> No schedules found. Create a new schedule to get started.
            </div>
          `;
          return;
        }
        
        // Render schedules
        let html = '<div class="table-responsive">';
        html += `
          <table class="table table-striped table-hover">
            <thead>
              <tr>
                <th>Name</th>
                <th>Frequency</th>
                <th>Next Run</th>
                <th>Report</th>
                <th>Status</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
        `;
        
        data.schedules.forEach(schedule => {
          const nextRun = getNextRunTime(schedule.cronExpression, schedule.timezone);
          
          html += `
            <tr>
              <td>${schedule.name}</td>
              <td>${formatCronExpression(schedule.cronExpression)}</td>
              <td>${nextRun}</td>
              <td>${schedule.reportConfig.title}</td>
              <td>
                <span class="badge ${schedule.active ? 'bg-success' : 'bg-secondary'}">
                  ${schedule.active ? 'Active' : 'Inactive'}
                </span>
              </td>
              <td>
                <div class="btn-group btn-group-sm">
                  <button class="btn btn-outline-primary edit-schedule-btn" data-id="${schedule.id}">
                    <i class="bi bi-pencil"></i>
                  </button>
                  <button class="btn btn-outline-success run-now-btn" data-id="${schedule.id}">
                    <i class="bi bi-play-fill"></i>
                  </button>
                </div>
              </td>
            </tr>
          `;
        });
        
        html += `
            </tbody>
          </table>
        </div>
        `;
        
        schedulesContainer.innerHTML = html;
        
        // Add event listeners to buttons
        document.querySelectorAll('.edit-schedule-btn').forEach(btn => {
          btn.addEventListener('click', () => {
            const scheduleId = btn.getAttribute('data-id');
            openEditScheduleModal(scheduleId);
          });
        });
        
        document.querySelectorAll('.run-now-btn').forEach(btn => {
          btn.addEventListener('click', async () => {
            const scheduleId = btn.getAttribute('data-id');
            await runScheduleNow(scheduleId);
          });
        });
      } catch (error) {
        console.error('Error loading schedules:', error);
        document.getElementById('schedulesContainer').innerHTML = `
          <div class="alert alert-danger">
            <i class="bi bi-exclamation-triangle me-2"></i> Error loading schedules: ${error.message}
          </div>
        `;
      }
    }
    
    // Save schedule
    async function saveSchedule() {
      try {
        // Get form values
        const name = document.getElementById('scheduleName').value;
        const description = document.getElementById('scheduleDescription').value;
        const frequency = document.getElementById('scheduleFrequency').value;
        const timezone = document.getElementById('scheduleTimezone').value;
        const active = document.getElementById('activeSwitch').checked;
        const recipients = document.getElementById('recipients').value.split(',').map(email => email.trim()).filter(email => email);
        
        // Get cron expression
        let cronExpression;
        
        if (frequency === 'custom') {
          cronExpression = document.getElementById('customCron').value;
        } else {
          const time = document.getElementById('scheduleTime').value;
          const [hours, minutes] = time.split(':');
          
          if (frequency === 'daily') {
            cronExpression = `${minutes} ${hours} * * *`;
          } else if (frequency === 'weekly') {
            const weekdays = Array.from(document.querySelectorAll('.weekday-check:checked')).map(cb => cb.value).join(',');
            cronExpression = `${minutes} ${hours} * * ${weekdays || '0'}`;
          } else if (frequency === 'monthly') {
            const day = document.getElementById('monthDay').value;
            cronExpression = day === 'last' ? `${minutes} ${hours} L * *` : `${minutes} ${hours} ${day} * *`;
          }
        }
        
        // Get report configuration
        const reportTitle = document.getElementById('reportTitle').value;
        const dataSourceType = document.getElementById('dataSource').value;
        const fileName = document.getElementById('fileName').value;
        const selectedColumns = Array.from(document.getElementById('columnsSelect').selectedOptions).map(opt => opt.value);
        
        // Get selected chart types
        const chartTypes = [];
        if (document.getElementById('barChartCheck').checked) chartTypes.push('bar');
        if (document.getElementById('pieChartCheck').checked) chartTypes.push('pie');
        if (document.getElementById('lineChartCheck').checked) chartTypes.push('line');
        if (document.getElementById('tableCheck').checked) chartTypes.push('table');
        
        // Validate form
        if (!name || !cronExpression || !reportTitle || !dataSourceType || !fileName || selectedColumns.length === 0 || chartTypes.length === 0) {
          alert('Please fill in all required fields');
          return;
        }
        
        // Create schedule object
        const schedule = {
          name,
          description,
          cronExpression,
          timezone,
          active,
          recipients,
          reportConfig: {
            title: reportTitle,
            dataSource: {
              type: 'file',
              fileType: dataSourceType,
              fileName
            },
            charts: []
          }
        };
        
        // Add charts based on selected types
        if (chartTypes.includes('bar')) {
          // Add bar chart for numeric columns
          selectedColumns.forEach(column => {
            schedule.reportConfig.charts.push({
              type: 'bar',
              title: `${column} Analysis`,
              xAxis: selectedColumns[0],
              yAxis: [column],
              dimensions: {
                width: 800,
                height: 400
              }
            });
          });
        }
        
        if (chartTypes.includes('pie')) {
          // Add pie chart
          schedule.reportConfig.charts.push({
            type: 'pie',
            title: `Distribution of ${selectedColumns[0]}`,
            labels: selectedColumns[0],
            values: selectedColumns[1] || selectedColumns[0],
            dimensions: {
              width: 600,
              height: 600
            }
          });
        }
        
        if (chartTypes.includes('line')) {
          // Add line chart
          schedule.reportConfig.charts.push({
            type: 'line',
            title: 'Trend Analysis',
            xAxis: selectedColumns[0],
            yAxis: selectedColumns.slice(1, 3),
            dimensions: {
              width: 800,
              height: 400
            }
          });
        }
        
        if (chartTypes.includes('table')) {
          // Add table
          schedule.reportConfig.charts.push({
            type: 'table',
            title: 'Data Table',
            columns: selectedColumns,
            limit: 50,
            dimensions: {
              width: 800,
              height: 600
            }
          });
        }
        
        // Save schedule
        const response = await fetch('/api/schedules', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(schedule)
        });
        
        const result = await response.json();
        
        if (result.error) {
          alert(`Error: ${result.error}`);
          return;
        }
        
        // Close modal
        const modal = bootstrap.Modal.getInstance(document.getElementById('createScheduleModal'));
        modal.hide();
        
        // Show success message
        showToast('Schedule created successfully', 'success');
        
        // Reload schedules
        loadSchedules();
      } catch (error) {
        console.error('Error saving schedule:', error);
        alert(`Error: ${error.message}`);
      }
    }
    
    // Open edit schedule modal
    async function openEditScheduleModal(scheduleId) {
      try {
        const response = await fetch(`/api/schedules/${scheduleId}`);
        const data = await response.json();
        
        if (data.error) {
          alert(`Error: ${data.error}`);
          return;
        }
        
        const schedule = data.schedule;
        
        // Populate form fields
        document.getElementById('editScheduleId').value = schedule.id;
        document.getElementById('editScheduleName').value = schedule.name;
        
        // Additional form population would go here
        
        // Show modal
        const modal = new bootstrap.Modal(document.getElementById('editScheduleModal'));
        modal.show();
      } catch (error) {
        console.error('Error loading schedule:', error);
        alert(`Error: ${error.message}`);
      }
    }
    
    // Run schedule now
    async function runScheduleNow(scheduleId) {
      try {
        const response = await fetch(`/api/schedules/${scheduleId}/run`, {
          method: 'POST'
        });
        
        const data = await response.json();
        
        if (data.error) {
          alert(`Error: ${data.error}`);
          return;
        }
        
        showToast('Report generation started', 'success');
        
        // Open report in new window if available
        if (data.reportPath) {
          window.open(data.reportPath, '_blank');
        }
      } catch (error) {
        console.error('Error running schedule:', error);
        alert(`Error: ${error.message}`);
      }
    }
    
    // Format cron expression for display
    function formatCronExpression(cron) {
      const parts = cron.split(' ');
      
      if (parts.length !== 5) {
        return cron;
      }
      
      const [minute, hour, dayOfMonth, month, dayOfWeek] = parts;
      
      if (dayOfMonth === '*' && month === '*' && dayOfWeek === '*') {
        return `Daily at ${formatTime(hour, minute)}`;
      } else if (dayOfMonth === '*' && month === '*' && dayOfWeek !== '*') {
        const days = dayOfWeek.split(',').map(d => ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'][parseInt(d)]).join(', ');
        return `Weekly on ${days} at ${formatTime(hour, minute)}`;
      } else if (dayOfMonth !== '*' && month === '*' && dayOfWeek === '*') {
        return `Monthly on day ${dayOfMonth} at ${formatTime(hour, minute)}`;
      } else {
        return cron;
      }
    }
    
    // Format time for display
    function formatTime(hour, minute) {
      const h = parseInt(hour);
      const m = parseInt(minute);
      const period = h >= 12 ? 'PM' : 'AM';
      const hour12 = h % 12 || 12;
      return `${hour12}:${m.toString().padStart(2, '0')} ${period}`;
    }
    
    // Get next run time
    function getNextRunTime(cronExpression, timezone) {
      try {
        // This is a simplified version - in a real implementation, you would use a library like cron-parser
        return 'Soon';
      } catch (error) {
        return 'Unknown';
      }
    }
  });
</script>