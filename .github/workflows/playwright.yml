name: Playwright Tests

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  schedule:
<<<<<<< HEAD
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  pre-checks:
=======
    - cron: '0 0 * * *' # Run daily at midnight

jobs:
  framework-validation:
    name: Framework Validation
>>>>>>> 51948a2 (Main v1.0)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

<<<<<<< HEAD
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
=======
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: npm
>>>>>>> 51948a2 (Main v1.0)

      - name: Install dependencies
        run: npm ci

<<<<<<< HEAD
      - name: Run npm audit (temporary safe mode)
        run: npm audit || echo "Ignoring known xlsx vulnerability until fix released."

      - name: Run ESLint
        run: npm run lint
        continue-on-error: false

      - name: Run Prettier check
        run: npm run format:check
        continue-on-error: false

  select-tests:
    needs: pre-checks
    runs-on: ubuntu-latest
    outputs:
      tests: ${{ steps.select-tests.outputs.tests }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Select changed tests
        id: select-tests
        run: |
          TESTS=$(npx framework select-tests origin/main HEAD | jq -R -s -c 'split("\n")[:-1]')
          echo "tests=$TESTS" >> $GITHUB_OUTPUT

  test:
    needs: [pre-checks, select-tests]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        environment: [development, qa, uat, prod]
        shard: ['1/3', '2/3', '3/3']

    env:
      SHARD_SANITIZED: ${{ matrix.shard == '1/3' && '1-of-3' || matrix.shard == '2/3' && '2-of-3' || matrix.shard == '3/3' && '3-of-3' }}

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: Clean install dependencies
        run: rm -rf node_modules && npm ci

      - name: Install dotenv-cli
        run: npm install -g dotenv-cli

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Quarantine flaky tests
        run: dotenv -e .env -- npx framework quarantine-flaky
        continue-on-error: true

      - name: Run Playwright tests
        run: dotenv -e .env -- npx framework run --project "${{ matrix.browser }}" --tags "(@smoke or @regression or @api or @ui or @flaky or @e2e or @sanity)"

      - name: Generate Allure report
        if: always()
        run: |
          if [ -d "reports/allure" ]; then
            dotenv -e .env -- npx framework generate-report
          else
            echo "Skipping Allure report generation: reports/allure not found"
          fi

      - name: Upload Allure Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report-${{ matrix.browser }}-${{ matrix.environment }}-${{ env.SHARD_SANITIZED }}
          path: reports/allure-report/

      - name: Upload Playwright HTML Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-html-report-${{ matrix.browser }}-${{ matrix.environment }}-${{ env.SHARD_SANITIZED }}
          path: playwright-report/

      - name: Upload Screenshots and Traces
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: traces-and-screenshots-${{ matrix.browser }}-${{ matrix.environment }}-${{ env.SHARD_SANITIZED }}
          path: |
            test-results/
            reports/traces/
            screenshots/

      - name: Notify Slack on failure
        if: failure()
        run: |
          dotenv -e .env -- npx framework notify $SLACK_WEBHOOK_URL \
          "Playwright tests failed for ${{ matrix.browser }} in ${{ matrix.environment }} (shard ${{ env.SHARD_SANITIZED }}). Check run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

      - name: Push results to Xray
        if: always()
        run: dotenv -e .env -- npx framework push-to-xray "TEST_EXEC-${{ matrix.browser }}-${{ matrix.environment }}-${{ github.run_id }}"
=======
      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Create .env file
        run: |
          cp .env.example .env
          echo "BASE_URL=https://example.com" >> .env
          echo "API_URL=https://api.example.com" >> .env
          echo "USERNAME=testuser" >> .env
          echo "PASSWORD=testpassword" >> .env

      - name: Run framework health check
        run: node scripts/framework-health-check.js

      - name: Run framework validation tests
        run: npx playwright test --grep @validation

      - name: Generate validation dashboard
        if: always()
        run: node scripts/generate-validation-dashboard.js

      - name: Upload validation results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: framework-validation-results
          path: |
            reports/validation/
            playwright-report/
            test-results/
          retention-days: 30

  test:
    name: 'Playwright Tests'
    runs-on: ubuntu-latest
    needs: framework-validation
    strategy:
      fail-fast: false
      matrix:
        shard: [1, 2, 3, 4]
        browser: [chromium, firefox, webkit]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Create .env file
        run: |
          cp .env.example .env
          echo "BASE_URL=${{ secrets.BASE_URL }}" >> .env
          echo "API_URL=${{ secrets.API_URL }}" >> .env
          echo "USERNAME=${{ secrets.USERNAME }}" >> .env
          echo "PASSWORD=${{ secrets.PASSWORD }}" >> .env

      - name: Run Playwright tests
        run: npx playwright test --shard=${{ matrix.shard }}/${{ strategy.job-total }} --project=${{ matrix.browser }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report-${{ matrix.browser }}-${{ matrix.shard }}
          path: |
            playwright-report/
            test-results/
            allure-results/
          retention-days: 30

  report:
    name: 'Generate Test Report'
    needs: test
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Download all test results
        uses: actions/download-artifact@v3
        with:
          path: all-test-results

      - name: Merge test results
        run: |
          mkdir -p playwright-report
          mkdir -p allure-results

          # Merge playwright reports
          find all-test-results -name "*.json" -path "*/playwright-report/*" -exec cp {} playwright-report/ \;

          # Merge allure results
          find all-test-results -name "*.json" -path "*/allure-results/*" -exec cp {} allure-results/ \;

      - name: Generate Allure report
        run: |
          npm install -g allure-commandline
          allure generate allure-results --clean -o allure-report

      - name: Upload merged test report
        uses: actions/upload-artifact@v3
        with:
          name: merged-test-report
          path: |
            playwright-report/
            allure-report/
          retention-days: 30

      - name: Deploy report to GitHub Pages
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./allure-report
          destination_dir: reports

  accessibility:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    needs: framework-validation
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Create .env file
        run: |
          cp .env.example .env
          echo "BASE_URL=${{ secrets.BASE_URL }}" >> .env
          echo "API_URL=${{ secrets.API_URL }}" >> .env
          echo "USERNAME=${{ secrets.USERNAME }}" >> .env
          echo "PASSWORD=${{ secrets.PASSWORD }}" >> .env

      - name: Run accessibility tests
        run: npm run test:accessibility

      - name: Upload accessibility results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: accessibility-results
          path: reports/accessibility
          retention-days: 30

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: framework-validation
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Create .env file
        run: |
          cp .env.example .env
          echo "BASE_URL=${{ secrets.BASE_URL }}" >> .env
          echo "API_URL=${{ secrets.API_URL }}" >> .env
          echo "USERNAME=${{ secrets.USERNAME }}" >> .env
          echo "PASSWORD=${{ secrets.PASSWORD }}" >> .env

      - name: Run performance tests
        run: npm run test:performance

      - name: Upload performance results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: |
            reports/performance/
            reports/lighthouse/
          retention-days: 30

  visual:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    needs: framework-validation
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Create .env file
        run: |
          cp .env.example .env
          echo "BASE_URL=${{ secrets.BASE_URL }}" >> .env
          echo "API_URL=${{ secrets.API_URL }}" >> .env
          echo "USERNAME=${{ secrets.USERNAME }}" >> .env
          echo "PASSWORD=${{ secrets.PASSWORD }}" >> .env

      - name: Run visual tests
        run: npm run test:visual

      - name: Upload visual test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: visual-test-results
          path: |
            test-results/
            playwright-report/
          retention-days: 30

  docs:
    name: Build and Deploy Docs
    runs-on: ubuntu-latest
    needs:
      - report
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: npm

      - name: Install dependencies
        run: cd docs/docusaurus && npm ci

      - name: Build documentation
        run: cd docs/docusaurus && npm run build

      - name: Generate PDF guide
        run: node scripts/generate-pdf-guide.js

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/docusaurus/build
          destination_dir: docs
>>>>>>> 51948a2 (Main v1.0)
